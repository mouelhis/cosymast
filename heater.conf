Switched heater {

  Dimension = 3 ;
  //Dimension = 4 ;
  //Dimension = 5 ;
  
  Modes = { `hr1, `hr2, `hr3, `none } ;
  //Modes = { `hr1, `hr2, `hr3, `hr4, `none } ;
  //Modes = { `hr1, `hr2, `hr3, `hr4, `hr5, `none } ;
  
  Constants :
    alpha = 1 / 20 ;
    beta = 1 / 200 ;
    gamma = 1 / 100 ;
    te = 10 ;
    th = 50 ;
    twoabg = (-2 * alpha) - beta - gamma ;
    twoab = (-2 * alpha) - beta ;
    btegtc = beta * te + gamma * th ; 
    bte = beta * te; 
    
  Variables :
    t1, t2, t3 : real -> real ;
    //t1, t2, t3, t4 : real -> real ;
    //t1, t2, t3, t4, t5 : real -> real ;
  
  Trajectories :
     tp = [t1, t2, t3] ;
     //tp = [t1, t2, t3, t4] ;
     //tp = [t1, t2, t3, t4, t5] ;
     
  Coefficients :
     a1,a2,a3,a4 : Matrix (3) ;
     b1,b2,b3,b4 : Vector (3) ;;
     
     //a1,a2,a3,a4,a5 : Matrix (4) ;
     //b1,b2,b3,b4,b5 : Vector (4) ;;
     
     //a1,a2,a3,a4,a5,a6 : Matrix (5) ;
     //b1,b2,b3,b4,b5,b6 : Vector (5) ;;
     
     
     a1 = [[twoabg, alpha, alpha], [alpha, twoab, alpha], [alpha, alpha, twoab]];           
     a2 = [[twoab, alpha, alpha], [alpha, twoabg, alpha], [alpha, alpha, twoab]];           
     a3 = [[twoab, alpha, alpha], [alpha, twoab, alpha], [alpha, alpha, twoabg]];          
     a4 = [[twoab, alpha, alpha], [alpha, twoab, alpha], [alpha, alpha, twoab]];
     
     
     
     /*
     a1 = [[twoabg, alpha, 0, alpha], [alpha, twoab, alpha, 0], [0, alpha, twoab, alpha], [alpha, 0, alpha, twoab]];           
     a2 = [[twoab, alpha, 0, alpha], [alpha, twoabg, alpha, 0], [0, alpha, twoab, alpha], [alpha, 0, alpha, twoab]];    
     a3 = [[twoab, alpha, 0, alpha], [alpha, twoab, alpha, 0], [0, alpha, twoabg, alpha], [alpha, 0, alpha, twoab]];         
     a4 = [[twoab, alpha, 0, alpha], [alpha, twoab, alpha, 0], [0, alpha, twoab, alpha], [alpha, 0, alpha, twoabg]];
     a5 = [[twoab, alpha, 0, alpha], [alpha, twoab, alpha, 0], [0, alpha, twoab, alpha], [alpha, 0, alpha, twoab]];
     */
     
     /*
     a1 = [[twoabg, alpha, 0, 0, alpha], [alpha, twoab, alpha, 0, 0], [0, alpha, twoab, alpha, 0], [0, 0, alpha, twoab, alpha], [alpha, 0, 0, alpha, twoab]];           
     a2 = [[twoab, alpha, 0, 0, alpha], [alpha, twoabg, alpha, 0, 0], [0, alpha, twoab, alpha, 0], [0, 0, alpha, twoab, alpha], [alpha, 0, 0, alpha, twoab]];        
     a3 = [[twoab, alpha, 0, 0, alpha], [alpha, twoab, alpha, 0, 0], [0, alpha, twoabg, alpha, 0], [0, 0, alpha, twoab, alpha], [alpha, 0, 0, alpha, twoab]];            
     a4 = [[twoab, alpha, 0, 0, alpha], [alpha, twoab, alpha, 0, 0], [0, alpha, twoab, alpha, 0], [0, 0, alpha, twoabg, alpha], [alpha, 0, 0, alpha, twoab]];      
     a5 = [[twoab, alpha, 0, 0, alpha], [alpha, twoab, alpha, 0, 0], [0, alpha, twoab, alpha, 0], [0, 0, alpha, twoab, alpha], [alpha, 0, 0, alpha, twoabg]];      
     a6 = [[twoab, alpha, 0, 0, alpha], [alpha, twoab, alpha, 0, 0], [0, alpha, twoab, alpha, 0], [0, 0, alpha, twoab, alpha], [alpha, 0, 0, alpha, twoab]];
     */
     
         
     b1 = [btegtc, bte, bte];     
     b2 = [bte, btegtc, bte];    
     b3 = [bte, bte, btegtc];     
     b4 = [bte, bte, bte];
     
     
     /*
     b1 = [btegtc, bte, bte, bte];     
     b2 = [bte, btegtc, bte, bte];    
     b3 = [bte, bte, btegtc, bte];     
     b4 = [bte, bte, bte, btegtc];
     b5 = [bte, bte, bte, bte];
     */
     
     /*
     b1 = [btegtc, bte, bte, bte, bte];     
     b2 = [bte, btegtc, bte, bte, bte];    
     b3 = [bte, bte, btegtc, bte, bte];     
     b4 = [bte, bte, bte, btegtc, bte];
     b5 = [bte, bte, bte, bte, btegtc];
     b6 = [bte, bte, bte, bte, bte];
     */
     
  VectorFields :
     for tp :
     simplified when `hr1 :: tp_dot = a1 * tp + b1 ;     
     simplified when `hr2 :: tp_dot = a2 * tp + b2 ;
     simplified when `hr3 :: tp_dot = a3 * tp + b3 ;
     simplified when `none :: tp_dot = a4 * tp + b4 ;
     
     //simplified when `hr4 :: tp_dot = a4 * tp + b4 ;
     //simplified when `none :: tp_dot = a5 * tp + b5 ;
     
     //simplified when `hr4 :: tp_dot = a4 * tp + b4 ;
     //simplified when `hr5 :: tp_dot = a5 * tp + b5 ;
     //simplified when `none :: tp_dot = a6 * tp + b6 ;
  
  SamplingParameters :  
      time = 20.0  ;            
      space = 0.05 ;
      finer = 2 ;
   
   
  safe31 = [20.0 .. 22.0] # [20.0 .. 22.0] # [20.0 .. 22.0];
  safe32 = [16.0 .. 24.0] # [16.0 .. 24.0] # [16.0 .. 24.0];
  
  //safe41 = [20.0 .. 22.0] # [20.0 .. 22.0] # [20.0 .. 22.0] # [20.0 .. 22.0];
  //safe42 = [16.0 .. 24.0] # [16.0 .. 24.0] # [16.0 .. 24.0] # [16.0 .. 24.0]; 
  
  //safe51 = [20.0 .. 22.0] # [20.0 .. 22.0] # [20.0 .. 22.0] # [20.0 .. 22.0] # [20.0 .. 22.0];
  //safe52 = [16.0 .. 24.0] # [16.0 .. 24.0] # [16.0 .. 24.0] # [16.0 .. 24.0] # [16.0 .. 24.0];      
      
  SafetySynthesis (tp,safe31,safe31,4) ; 
  //ReachabilitySynthesis (x,safe32,safe32,safe31,10.0,10) ;
  
  
  //`hr1, `hr2, `hr3, `none 
  Plot2Dof3D (dots,modes,[black,lightgray,black,lightgray],[lightgray,black,brown],10.0,10.0,[(`hr3,0),(`none,0),(`hr3,1),(`none,1),(`hr3,2),(`none,2)],t1,t2,21.9) 
  //Plot2Dof4D (dots,modes,[blue,black,brown,green,red],[black,gray,white],10.0,10.0,[(`hr1,0)],t1,t2,21.0,21.0) 
  //Plot2D (10.0,10.0)
} 