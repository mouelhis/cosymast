type token =
  | EOF
  | COMMA
  | SEMICOLON
  | IN
  | OPEN
  | CLOSE
  | OPEN_PAREN
  | CLOSE_PAREN
  | OPEN_BRACKET
  | CLOSE_BRACKET
  | DEFINITION
  | MAP
  | REALS
  | VECTOR
  | MATRIX
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | MODULUS
  | POWER
  | EQUALS
  | SINE
  | COSINE
  | TANGENT
  | COTANGENT
  | SECANT
  | COSECANT
  | ARCSINE
  | ARCCOSINE
  | ARCTANGENT
  | HYPSINE
  | HYPCOSINE
  | HYPTANGENT
  | SQUAREROOT
  | NATLOGARITHM
  | EXPONENTIAL
  | LOGARITHM
  | SWITCHED
  | DIMENSION
  | MODES
  | CONSTANTS
  | VARIABLES
  | TRAJECTORIES
  | COEFFICIENTS
  | VECTORFIELDS
  | SAMPLING
  | SAFETY
  | REACHABILITY
  | PLOT2D
  | PLOT2DOF3D
  | PLOT2DOF4D
  | SIMULATION
  | DISCRETE
  | CONTINUOUS
  | TIME
  | TAU
  | ETA
  | FINERSCALE
  | SCALEMINDWELL
  | WHEN
  | FOR
  | BELONGS
  | THEN
  | ELSE
  | SIMPLIFIED
  | EXPANDED
  | SETIMES
  | SETMINUS
  | ID of (string)
  | ENUMFIELD of (string)
  | INTEGER of (int)
  | NATURAL of (int)
  | INTERVAL of (float * float)
  | REAL of (float)

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
(** **********************************************************************************)
(** CoSyMA: a tool for COntroller SYnthesis using Multi-scale Abstractions           *)   
(** @author: Sebti Mouelhi                                                           *)
(**                                                                                  *)
(** Copyright (c) 2011-2015, INRIA Rhône-Alpes                                       *)
(** All rights reserved                                                              *)
(** **********************************************************************************)
  
open Toolkit
open Typecheck 

(** Get the location of *)
let get_location pstart pend =
  let col_start = (pstart.Lexing.pos_cnum - pstart.Lexing.pos_bol) in
  let col_end = (pend.Lexing.pos_cnum - pend.Lexing.pos_bol) - 1 in
  let line_num = pstart.Lexing.pos_lnum in
    (line_num, col_start, col_end)

(** Parse error message. *)
let parse_error s =
  let lb = opt_get !Typecheck.the_lexbuf in
  let (l, cs, ce) = get_location (Lexing.lexeme_start_p lb) (Lexing.lexeme_end_p lb) in
  failwith (spf "Syntax error detected at line %d and characters %d-%d !" l cs ce)

(** Tuple (line,column). *)
let l_cs_ce () = get_location (symbol_start_pos ()) (symbol_end_pos ())
   
# 109 "parser.ml"
let yytransl_const = [|
    0 (* EOF *);
  257 (* COMMA *);
  258 (* SEMICOLON *);
  259 (* IN *);
  260 (* OPEN *);
  261 (* CLOSE *);
  262 (* OPEN_PAREN *);
  263 (* CLOSE_PAREN *);
  264 (* OPEN_BRACKET *);
  265 (* CLOSE_BRACKET *);
  266 (* DEFINITION *);
  267 (* MAP *);
  268 (* REALS *);
  269 (* VECTOR *);
  270 (* MATRIX *);
  271 (* PLUS *);
  272 (* MINUS *);
  273 (* TIMES *);
  274 (* DIVIDE *);
  275 (* MODULUS *);
  276 (* POWER *);
  277 (* EQUALS *);
  278 (* SINE *);
  279 (* COSINE *);
  280 (* TANGENT *);
  281 (* COTANGENT *);
  282 (* SECANT *);
  283 (* COSECANT *);
  284 (* ARCSINE *);
  285 (* ARCCOSINE *);
  286 (* ARCTANGENT *);
  287 (* HYPSINE *);
  288 (* HYPCOSINE *);
  289 (* HYPTANGENT *);
  290 (* SQUAREROOT *);
  291 (* NATLOGARITHM *);
  292 (* EXPONENTIAL *);
  293 (* LOGARITHM *);
  294 (* SWITCHED *);
  295 (* DIMENSION *);
  296 (* MODES *);
  297 (* CONSTANTS *);
  298 (* VARIABLES *);
  299 (* TRAJECTORIES *);
  300 (* COEFFICIENTS *);
  301 (* VECTORFIELDS *);
  302 (* SAMPLING *);
  303 (* SAFETY *);
  304 (* REACHABILITY *);
  305 (* PLOT2D *);
  306 (* PLOT2DOF3D *);
  307 (* PLOT2DOF4D *);
  308 (* SIMULATION *);
  309 (* DISCRETE *);
  310 (* CONTINUOUS *);
  311 (* TIME *);
  312 (* TAU *);
  313 (* ETA *);
  314 (* FINERSCALE *);
  315 (* SCALEMINDWELL *);
  316 (* WHEN *);
  317 (* FOR *);
  318 (* BELONGS *);
  319 (* THEN *);
  320 (* ELSE *);
  321 (* SIMPLIFIED *);
  322 (* EXPANDED *);
  323 (* SETIMES *);
  324 (* SETMINUS *);
    0|]

let yytransl_block = [|
  325 (* ID *);
  326 (* ENUMFIELD *);
  327 (* INTEGER *);
  328 (* NATURAL *);
  329 (* INTERVAL *);
  330 (* REAL *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\003\000\013\000\013\000\013\000\004\000\014\000\
\014\000\015\000\017\000\017\000\005\000\019\000\018\000\021\000\
\021\000\020\000\020\000\020\000\020\000\006\000\023\000\022\000\
\024\000\024\000\007\000\007\000\027\000\025\000\029\000\029\000\
\028\000\028\000\028\000\028\000\030\000\026\000\031\000\031\000\
\030\000\030\000\030\000\016\000\016\000\016\000\016\000\016\000\
\016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
\016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
\016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
\016\000\033\000\034\000\035\000\035\000\032\000\036\000\037\000\
\037\000\008\000\038\000\040\000\040\000\039\000\039\000\041\000\
\044\000\044\000\043\000\042\000\046\000\046\000\045\000\045\000\
\047\000\048\000\048\000\009\000\049\000\049\000\050\000\051\000\
\052\000\053\000\010\000\010\000\055\000\055\000\055\000\054\000\
\056\000\056\000\011\000\011\000\057\000\059\000\059\000\058\000\
\060\000\012\000\012\000\012\000\012\000\012\000\064\000\064\000\
\065\000\065\000\065\000\065\000\065\000\065\000\061\000\061\000\
\062\000\062\000\063\000\063\000\066\000\069\000\069\000\067\000\
\070\000\070\000\068\000\071\000\071\000\000\000"

let yylen = "\002\000\
\016\000\004\000\006\000\000\000\002\000\003\000\003\000\000\000\
\005\000\002\000\000\000\003\000\003\000\003\000\002\000\001\000\
\003\000\001\000\003\000\003\000\005\000\003\000\005\000\002\000\
\001\000\003\000\000\000\005\000\003\000\002\000\001\000\003\000\
\004\000\004\000\003\000\005\000\003\000\002\000\001\000\003\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\003\000\002\000\002\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\003\000\003\000\003\000\003\000\003\000\003\000\
\006\000\003\000\002\000\000\000\003\000\003\000\002\000\000\000\
\003\000\003\000\005\000\000\000\006\000\001\000\001\000\003\000\
\004\000\002\000\003\000\003\000\000\000\003\000\007\000\005\000\
\004\000\000\000\005\000\003\000\008\000\006\000\003\000\003\000\
\003\000\003\000\005\000\007\000\000\000\005\000\007\000\004\000\
\000\000\005\000\001\000\001\000\005\000\007\000\009\000\005\000\
\011\000\004\000\004\000\004\000\004\000\004\000\005\000\003\000\
\013\000\015\000\015\000\017\000\015\000\017\000\019\000\021\000\
\025\000\027\000\027\000\029\000\002\000\000\000\003\000\002\000\
\000\000\003\000\006\000\000\000\007\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\150\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\007\000\000\000\000\000\000\000\000\000\000\000\005\000\000\000\
\000\000\010\000\000\000\000\000\013\000\000\000\000\000\000\000\
\000\000\006\000\003\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\044\000\
\045\000\047\000\046\000\048\000\000\000\000\000\000\000\015\000\
\000\000\022\000\000\000\000\000\000\000\000\000\012\000\000\000\
\051\000\050\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\014\000\000\000\000\000\000\000\024\000\
\000\000\000\000\000\000\000\000\000\000\000\000\049\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\009\000\
\000\000\000\000\069\000\070\000\071\000\000\000\000\000\000\000\
\017\000\000\000\000\000\000\000\000\000\000\000\030\000\000\000\
\082\000\000\000\000\000\000\000\052\000\053\000\054\000\055\000\
\056\000\057\000\058\000\059\000\060\000\061\000\062\000\063\000\
\064\000\065\000\066\000\000\000\019\000\000\000\020\000\000\000\
\026\000\000\000\000\000\000\000\029\000\000\000\000\000\000\000\
\028\000\000\000\042\000\043\000\000\000\000\000\000\000\100\000\
\000\000\000\000\000\000\000\000\000\000\115\000\116\000\000\000\
\000\000\023\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\038\000\032\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\073\000\021\000\000\000\035\000\000\000\000\000\
\000\000\075\000\000\000\079\000\074\000\078\000\037\000\000\000\
\000\000\000\000\000\000\000\000\086\000\087\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\034\000\
\033\000\000\000\000\000\040\000\000\000\000\000\000\000\000\000\
\000\000\083\000\000\000\000\000\000\000\000\000\000\000\107\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\
\036\000\077\000\081\000\000\000\000\000\088\000\000\000\000\000\
\000\000\000\000\092\000\000\000\000\000\000\000\000\000\112\000\
\000\000\000\000\000\000\117\000\000\000\120\000\000\000\000\000\
\122\000\125\000\000\000\123\000\000\000\124\000\000\000\000\000\
\126\000\091\000\000\000\090\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\108\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\141\000\000\000\000\000\000\000\
\000\000\096\000\000\000\094\000\105\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\089\000\000\000\000\000\000\000\000\000\101\000\
\000\000\110\000\000\000\000\000\000\000\000\000\127\000\000\000\
\000\000\143\000\000\000\000\000\000\000\085\000\106\000\114\000\
\000\000\118\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\097\000\111\000\000\000\000\000\000\000\144\000\
\000\000\000\000\000\000\000\000\000\000\119\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\146\000\000\000\
\000\000\000\000\000\000\000\000\121\000\000\000\000\000\000\000\
\000\000\099\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\131\000\133\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\132\000\
\134\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\136\000\000\000\
\000\000\000\000\000\000\000\000\000\000\147\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\138\000\000\000\000\000\000\000\149\000\140\000"

let yydgoto = "\002\000\
\004\000\008\000\011\000\015\000\020\000\029\000\041\000\078\000\
\118\000\156\000\197\000\226\000\023\000\025\000\026\000\184\000\
\034\000\037\000\038\000\108\000\072\000\074\000\075\000\112\000\
\114\000\185\000\115\000\181\000\151\000\186\000\213\000\187\000\
\188\000\209\000\234\000\210\000\236\000\153\000\244\000\018\001\
\245\000\246\000\014\001\046\001\247\000\051\001\098\001\147\001\
\192\000\193\000\250\000\054\001\103\001\219\000\024\001\056\001\
\198\000\199\000\255\000\001\001\032\001\035\001\037\001\033\001\
\039\001\072\001\142\001\211\001\093\001\152\001\230\001"

let yysindex = "\006\000\
\234\254\000\000\206\254\000\000\019\255\243\254\009\255\254\254\
\005\255\063\255\050\255\110\255\132\255\143\255\122\255\000\000\
\002\255\098\255\169\255\139\255\114\255\002\255\223\255\230\255\
\000\000\212\255\098\255\239\255\203\255\002\255\000\000\248\255\
\185\255\000\000\237\255\252\255\000\000\254\255\188\255\255\255\
\231\255\000\000\000\000\230\255\237\255\237\255\237\255\015\000\
\016\000\017\000\019\000\020\000\027\000\045\000\048\000\064\000\
\072\000\073\000\074\000\078\000\092\000\093\000\094\000\000\000\
\000\000\000\000\000\000\000\000\220\255\032\255\098\255\000\000\
\080\000\000\000\032\000\098\255\099\000\058\000\000\000\125\255\
\000\000\000\000\237\255\237\255\237\255\237\255\237\255\237\255\
\237\255\237\255\237\255\237\255\237\255\237\255\237\255\237\255\
\237\255\237\255\098\255\237\255\237\255\237\255\237\255\237\255\
\237\255\044\000\107\000\000\000\254\255\111\000\188\255\000\000\
\117\000\119\000\120\000\063\000\123\000\059\000\000\000\012\000\
\028\000\042\000\049\000\056\000\070\000\076\000\090\000\096\000\
\116\000\122\000\136\000\142\000\156\000\162\000\017\255\000\000\
\028\255\028\255\000\000\000\000\000\000\089\255\118\000\077\255\
\000\000\098\255\032\000\148\255\094\255\098\255\000\000\075\000\
\000\000\069\000\124\000\103\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\237\255\000\000\077\000\000\000\137\000\
\000\000\153\000\141\000\159\000\000\000\177\255\127\000\171\255\
\000\000\164\000\000\000\000\000\120\000\165\000\146\000\000\000\
\168\000\177\000\178\000\180\000\145\255\000\000\000\000\176\000\
\179\000\000\000\126\255\115\000\125\000\237\255\138\255\188\000\
\181\000\189\000\094\255\094\255\000\000\000\000\033\255\237\255\
\143\000\126\000\006\255\132\000\133\000\197\000\198\000\199\000\
\200\000\202\000\000\000\000\000\135\000\000\000\203\000\204\000\
\237\255\000\000\201\000\000\000\000\000\000\000\000\000\164\000\
\144\000\152\000\154\000\213\000\000\000\000\000\214\000\171\255\
\196\000\216\000\210\000\151\000\177\000\220\000\215\000\222\000\
\217\000\207\254\157\000\158\000\221\000\225\001\219\000\000\000\
\000\000\138\255\188\000\000\000\167\000\169\000\161\000\166\000\
\171\000\000\000\104\255\237\255\182\000\170\000\218\000\000\000\
\232\000\172\000\233\000\173\000\236\000\242\000\243\000\238\000\
\239\000\246\000\241\000\248\000\244\000\183\000\245\000\000\000\
\000\000\000\000\000\000\104\255\049\255\000\000\240\000\249\000\
\184\000\252\000\000\000\171\255\234\000\254\000\250\000\000\000\
\177\000\151\000\003\001\000\000\004\001\000\000\193\000\190\000\
\000\000\000\000\194\000\000\000\205\000\000\000\008\001\001\001\
\000\000\000\000\144\000\000\000\206\000\207\000\009\001\104\255\
\195\000\211\000\208\000\011\255\000\000\209\000\223\000\012\001\
\014\001\015\001\016\001\212\000\000\000\020\001\169\000\002\001\
\005\001\000\000\033\255\000\000\000\000\006\001\022\001\019\001\
\151\000\177\000\028\001\030\001\024\001\224\000\025\001\026\001\
\008\001\225\000\000\000\237\255\237\255\213\000\226\000\000\000\
\170\000\000\000\033\001\061\255\227\000\228\000\000\000\228\000\
\228\000\000\000\036\001\171\255\158\255\000\000\000\000\000\000\
\151\000\000\000\038\001\043\001\044\001\037\001\039\001\040\001\
\229\000\237\000\000\000\000\000\235\000\247\000\251\000\000\000\
\051\001\052\001\053\001\054\001\035\001\000\000\056\001\044\001\
\050\001\055\001\058\001\253\000\237\255\255\000\000\000\228\000\
\228\000\228\000\059\001\158\255\000\000\061\001\063\001\064\001\
\000\001\000\000\060\001\066\001\067\001\074\001\007\001\010\001\
\011\001\013\001\075\001\076\001\077\001\078\001\017\001\018\001\
\021\001\208\254\079\001\081\001\082\001\000\000\000\000\085\001\
\080\001\086\001\088\001\164\255\083\001\083\001\083\001\000\000\
\000\000\023\001\089\001\090\001\091\001\096\001\100\001\101\001\
\102\001\032\001\041\001\045\001\046\001\098\001\000\000\105\001\
\106\001\107\001\047\001\048\001\084\001\000\000\108\001\109\001\
\042\001\049\001\057\001\112\001\117\001\118\001\062\001\065\001\
\068\001\113\001\000\000\120\001\107\001\069\001\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\119\001\087\001\000\000\000\000\000\000\119\001\000\000\018\255\
\000\000\000\000\000\000\000\000\092\001\119\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\018\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\093\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\087\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\123\001\000\000\000\000\000\000\135\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\081\255\214\255\000\000\000\000\000\000\085\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\124\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\022\000\125\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\121\001\129\001\
\000\000\000\000\000\000\095\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\097\001\000\000\000\000\000\000\126\001\
\000\000\000\000\000\000\172\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\121\001\129\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\029\255\000\000\000\000\012\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\130\001\000\000\000\000\000\000\000\000\
\000\000\172\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\132\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\029\255\
\000\000\094\001\000\000\000\000\000\000\000\000\000\000\000\000\
\115\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\172\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\132\001\000\000\000\000\000\000\000\000\097\001\000\000\000\000\
\012\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\131\001\142\001\000\000\000\000\000\000\
\172\255\000\000\000\000\000\000\136\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\136\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\142\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\139\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\140\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\141\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\143\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\144\001\000\000\000\000\000\000\
\000\000\000\000\000\000\146\001\143\001\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\243\255\216\001\002\000\221\255\
\018\002\000\000\078\002\000\000\041\002\000\000\043\002\008\002\
\000\000\000\000\006\002\000\000\224\001\013\000\174\001\000\000\
\102\255\000\000\149\001\000\000\150\001\000\000\070\001\071\001\
\000\000\182\255\099\001\072\001\252\254\103\001\000\000\027\001\
\000\000\000\000\000\000\000\000\000\000\007\255\222\254\073\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\129\254\038\255\104\001\031\001\175\000"

let yytablesize = 729
let yytable = "\069\000\
\143\001\144\001\021\000\025\001\198\001\199\001\001\000\252\000\
\031\000\080\000\081\000\082\000\105\001\113\000\050\001\003\000\
\042\000\172\000\005\000\030\001\011\000\200\001\006\000\085\001\
\031\001\007\000\011\000\208\000\036\000\009\000\093\000\100\000\
\101\000\102\000\103\000\104\000\105\000\010\000\011\000\106\000\
\174\001\175\001\176\001\107\000\102\000\103\000\104\000\120\000\
\121\000\122\000\123\000\124\000\125\000\126\000\127\000\128\000\
\129\000\130\000\131\000\132\000\133\000\134\000\135\000\084\001\
\137\000\138\000\139\000\140\000\141\000\142\000\122\001\022\000\
\036\000\253\000\093\000\050\001\012\000\113\000\106\001\113\000\
\011\001\067\000\067\000\013\000\174\000\072\000\072\000\067\000\
\175\000\067\000\014\000\072\000\093\000\072\000\241\000\067\000\
\067\000\242\000\243\000\045\000\067\000\182\000\148\001\100\000\
\101\000\102\000\103\000\104\000\046\000\047\000\075\001\016\000\
\123\001\242\000\243\000\048\000\049\000\050\000\051\000\052\000\
\053\000\054\000\055\000\056\000\057\000\058\000\059\000\060\000\
\061\000\062\000\063\000\119\000\138\001\229\000\139\001\017\000\
\200\000\230\000\233\000\100\000\101\000\102\000\103\000\104\000\
\105\000\018\000\207\000\176\000\064\000\195\000\196\000\113\000\
\100\000\101\000\102\000\103\000\104\000\105\000\146\001\178\000\
\179\000\180\000\183\000\019\000\066\000\067\000\024\000\068\000\
\242\000\243\000\207\000\027\000\100\000\101\000\102\000\103\000\
\104\000\105\000\025\000\025\000\248\000\028\000\045\000\030\000\
\206\000\100\000\101\000\102\000\103\000\104\000\105\000\046\000\
\047\000\222\000\223\000\224\000\225\000\010\001\048\000\049\000\
\050\000\051\000\052\000\053\000\054\000\055\000\056\000\057\000\
\058\000\059\000\060\000\061\000\062\000\063\000\068\000\068\000\
\208\001\209\001\109\000\109\000\068\000\099\000\068\000\239\000\
\240\000\074\001\076\001\032\000\068\000\068\000\033\000\064\000\
\035\000\068\000\100\000\101\000\102\000\103\000\104\000\105\000\
\052\001\039\000\045\000\212\001\213\001\065\000\040\000\066\000\
\067\000\043\000\068\000\046\000\047\000\044\000\070\000\071\000\
\073\000\076\000\048\000\049\000\050\000\051\000\052\000\053\000\
\054\000\055\000\056\000\057\000\058\000\059\000\060\000\061\000\
\062\000\063\000\157\000\077\000\083\000\084\000\085\000\045\000\
\086\000\087\000\100\000\101\000\102\000\103\000\104\000\105\000\
\088\000\111\000\158\000\064\000\045\000\045\000\045\000\045\000\
\045\000\045\000\100\000\101\000\102\000\103\000\104\000\105\000\
\159\000\065\000\089\000\066\000\067\000\090\000\068\000\160\000\
\100\000\101\000\102\000\103\000\104\000\105\000\161\000\100\000\
\101\000\102\000\103\000\104\000\105\000\091\000\100\000\101\000\
\102\000\103\000\104\000\105\000\162\000\092\000\093\000\094\000\
\132\001\133\001\163\000\095\000\100\000\101\000\102\000\103\000\
\104\000\105\000\100\000\101\000\102\000\103\000\104\000\105\000\
\164\000\096\000\097\000\098\000\110\000\116\000\165\000\117\000\
\100\000\101\000\102\000\103\000\104\000\105\000\100\000\101\000\
\102\000\103\000\104\000\105\000\143\000\144\000\146\000\148\000\
\149\000\150\000\166\000\152\000\191\000\154\000\173\000\155\000\
\167\000\172\001\100\000\101\000\102\000\103\000\104\000\105\000\
\100\000\101\000\102\000\103\000\104\000\105\000\168\000\190\000\
\194\000\202\000\204\000\211\000\169\000\201\000\100\000\101\000\
\102\000\103\000\104\000\105\000\100\000\101\000\102\000\103\000\
\104\000\105\000\170\000\203\000\205\000\212\000\216\000\215\000\
\171\000\217\000\100\000\101\000\102\000\103\000\104\000\105\000\
\100\000\101\000\102\000\103\000\104\000\105\000\227\000\220\000\
\218\000\221\000\231\000\228\000\235\000\237\000\100\000\101\000\
\102\000\103\000\104\000\105\000\232\000\238\000\251\000\249\000\
\254\000\000\001\002\001\003\001\004\001\005\001\006\001\007\001\
\206\000\008\001\009\001\015\001\013\001\016\001\017\001\019\001\
\020\001\021\001\022\001\023\001\026\001\027\001\028\001\029\001\
\040\001\034\001\036\001\041\001\038\001\044\001\047\001\049\001\
\045\001\058\001\060\001\048\001\055\001\062\001\057\001\053\001\
\059\001\061\001\063\001\064\001\065\001\066\001\067\001\068\001\
\069\001\077\001\070\001\073\001\079\001\080\001\081\001\082\001\
\071\001\083\001\078\001\086\001\087\001\088\001\090\001\089\001\
\092\001\094\001\101\001\099\001\109\001\102\001\110\001\111\001\
\112\001\091\001\096\001\097\001\114\001\107\001\116\001\120\001\
\104\001\117\001\119\001\121\001\124\001\113\001\125\001\126\001\
\128\001\129\001\137\001\108\001\145\001\127\001\149\001\140\001\
\141\001\135\001\131\001\150\001\151\001\153\001\156\001\154\001\
\155\001\157\001\158\001\161\001\162\001\163\001\164\001\165\001\
\166\001\168\001\136\000\177\001\183\001\079\000\169\001\160\001\
\159\001\170\001\184\001\185\001\171\001\179\001\173\001\180\001\
\181\001\182\001\186\001\191\001\192\001\193\001\194\001\201\001\
\187\001\202\001\203\001\188\001\189\001\204\001\190\001\205\001\
\210\001\233\001\195\001\196\001\214\001\206\001\197\001\207\001\
\218\001\215\001\216\001\217\001\219\001\220\001\221\001\222\001\
\226\001\227\001\228\001\229\001\234\001\235\001\223\001\236\001\
\239\001\224\001\225\001\231\001\232\001\240\001\241\001\245\001\
\246\001\128\000\237\001\004\000\018\000\031\000\041\000\103\000\
\008\000\076\000\238\001\104\000\095\000\242\001\243\001\016\000\
\027\000\080\000\248\001\039\000\142\000\244\001\084\000\098\000\
\145\000\129\000\130\000\135\000\109\000\145\000\137\000\148\000\
\139\000\147\000\177\000\189\000\214\000\012\001\042\001\000\000\
\043\001\000\000\102\000\247\001\000\000\000\000\115\001\000\000\
\118\001\000\000\000\000\000\000\000\000\095\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\100\001\000\000\
\000\000\000\000\000\000\000\000\134\001\000\000\167\001\000\000\
\000\000\136\001\000\000\000\000\000\000\000\000\178\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\130\001"

let yycheck = "\035\000\
\128\001\129\001\001\001\253\000\053\001\054\001\001\000\002\001\
\022\000\045\000\046\000\047\000\002\001\002\001\019\001\038\001\
\030\000\001\001\069\001\069\001\003\001\070\001\004\001\058\001\
\074\001\039\001\009\001\182\000\027\000\021\001\002\001\015\001\
\016\001\017\001\018\001\019\001\020\001\040\001\021\001\008\001\
\168\001\169\001\170\001\012\001\017\001\018\001\019\001\083\000\
\084\000\085\000\086\000\087\000\088\000\089\000\090\000\091\000\
\092\000\093\000\094\000\095\000\096\000\097\000\098\000\057\001\
\100\000\101\000\102\000\103\000\104\000\105\000\105\001\070\001\
\071\000\068\001\046\001\080\001\072\001\076\000\068\001\068\001\
\235\000\001\001\002\001\021\001\008\001\001\001\002\001\007\001\
\012\001\009\001\041\001\007\001\064\001\009\001\062\001\015\001\
\016\001\065\001\066\001\006\001\020\001\008\001\137\001\015\001\
\016\001\017\001\018\001\019\001\015\001\016\001\062\001\002\001\
\106\001\065\001\066\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\007\001\072\001\008\001\074\001\004\001\
\172\000\012\001\001\001\015\001\016\001\017\001\018\001\019\001\
\020\001\003\001\182\000\146\000\055\001\047\001\048\001\150\000\
\015\001\016\001\017\001\018\001\019\001\020\001\001\001\012\001\
\013\001\014\001\069\001\042\001\071\001\072\001\069\001\074\001\
\065\001\066\001\206\000\003\001\015\001\016\001\017\001\018\001\
\019\001\020\001\044\001\045\001\216\000\043\001\006\001\070\001\
\008\001\015\001\016\001\017\001\018\001\019\001\020\001\015\001\
\016\001\049\001\050\001\051\001\052\001\233\000\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\001\001\002\001\
\053\001\054\001\047\001\048\001\007\001\002\001\009\001\211\000\
\212\000\044\001\045\001\005\001\015\001\016\001\001\001\055\001\
\021\001\020\001\015\001\016\001\017\001\018\001\019\001\020\001\
\020\001\003\001\006\001\206\001\207\001\069\001\044\001\071\001\
\072\001\002\001\074\001\015\001\016\001\069\001\003\001\002\001\
\069\001\003\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\007\001\045\001\006\001\006\001\006\001\002\001\
\006\001\006\001\015\001\016\001\017\001\018\001\019\001\020\001\
\006\001\002\001\007\001\055\001\015\001\016\001\017\001\018\001\
\019\001\020\001\015\001\016\001\017\001\018\001\019\001\020\001\
\007\001\069\001\006\001\071\001\072\001\006\001\074\001\007\001\
\015\001\016\001\017\001\018\001\019\001\020\001\007\001\015\001\
\016\001\017\001\018\001\019\001\020\001\006\001\015\001\016\001\
\017\001\018\001\019\001\020\001\007\001\006\001\006\001\006\001\
\116\001\117\001\007\001\006\001\015\001\016\001\017\001\018\001\
\019\001\020\001\015\001\016\001\017\001\018\001\019\001\020\001\
\007\001\006\001\006\001\006\001\021\001\003\001\007\001\046\001\
\015\001\016\001\017\001\018\001\019\001\020\001\015\001\016\001\
\017\001\018\001\019\001\020\001\073\001\011\001\008\001\003\001\
\002\001\002\001\007\001\061\001\056\001\003\001\009\001\069\001\
\007\001\165\001\015\001\016\001\017\001\018\001\019\001\020\001\
\015\001\016\001\017\001\018\001\019\001\020\001\007\001\069\001\
\021\001\009\001\006\001\021\001\007\001\073\001\015\001\016\001\
\017\001\018\001\019\001\020\001\015\001\016\001\017\001\018\001\
\019\001\020\001\007\001\011\001\006\001\002\001\021\001\003\001\
\007\001\002\001\015\001\016\001\017\001\018\001\019\001\020\001\
\015\001\016\001\017\001\018\001\019\001\020\001\007\001\006\001\
\008\001\006\001\072\001\009\001\001\001\009\001\015\001\016\001\
\017\001\018\001\019\001\020\001\072\001\009\001\073\001\057\001\
\069\001\069\001\006\001\006\001\006\001\006\001\005\001\073\001\
\008\001\007\001\007\001\060\001\069\001\060\001\002\001\002\001\
\021\001\002\001\009\001\069\001\001\001\007\001\001\001\007\001\
\000\000\069\001\069\001\009\001\008\001\063\001\070\001\061\001\
\064\001\002\001\002\001\070\001\067\001\002\001\021\001\058\001\
\069\001\069\001\001\001\001\001\007\001\007\001\001\001\007\001\
\001\001\010\001\007\001\007\001\069\001\002\001\021\001\002\001\
\074\001\008\001\010\001\001\001\001\001\069\001\069\001\074\001\
\001\001\009\001\072\001\003\001\001\001\059\001\001\001\001\001\
\001\001\069\001\069\001\069\001\001\001\069\001\021\001\002\001\
\073\001\021\001\021\001\009\001\001\001\074\001\001\001\008\001\
\008\001\008\001\002\001\069\001\001\001\070\001\001\001\069\001\
\069\001\072\001\074\001\001\001\001\001\009\001\074\001\009\001\
\009\001\069\001\072\001\001\001\001\001\001\001\001\001\021\001\
\001\001\008\001\099\000\001\001\001\001\044\000\008\001\069\001\
\074\001\008\001\001\001\001\001\072\001\009\001\072\001\009\001\
\009\001\074\001\001\001\001\001\001\001\001\001\001\001\001\001\
\074\001\001\001\001\001\074\001\074\001\001\001\074\001\008\001\
\006\001\006\001\074\001\074\001\070\001\008\001\074\001\008\001\
\001\001\009\001\009\001\009\001\001\001\001\001\001\001\072\001\
\007\001\001\001\001\001\001\001\001\001\001\001\070\001\070\001\
\001\001\069\001\069\001\069\001\069\001\001\001\001\001\007\001\
\001\001\007\001\074\001\005\001\002\001\002\001\002\001\002\001\
\042\001\009\001\074\001\002\001\002\001\072\001\070\001\043\001\
\045\001\009\001\070\001\045\001\009\001\074\001\046\001\002\001\
\009\001\007\001\007\001\007\001\071\000\109\000\007\001\009\001\
\007\001\111\000\147\000\150\000\189\000\240\000\010\001\255\255\
\011\001\255\255\069\001\245\001\255\255\255\255\095\001\255\255\
\099\001\255\255\255\255\255\255\255\255\075\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\080\001\255\255\
\255\255\255\255\255\255\255\255\118\001\255\255\160\001\255\255\
\255\255\121\001\255\255\255\255\255\255\255\255\172\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\113\001"

let yynames_const = "\
  EOF\000\
  COMMA\000\
  SEMICOLON\000\
  IN\000\
  OPEN\000\
  CLOSE\000\
  OPEN_PAREN\000\
  CLOSE_PAREN\000\
  OPEN_BRACKET\000\
  CLOSE_BRACKET\000\
  DEFINITION\000\
  MAP\000\
  REALS\000\
  VECTOR\000\
  MATRIX\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  MODULUS\000\
  POWER\000\
  EQUALS\000\
  SINE\000\
  COSINE\000\
  TANGENT\000\
  COTANGENT\000\
  SECANT\000\
  COSECANT\000\
  ARCSINE\000\
  ARCCOSINE\000\
  ARCTANGENT\000\
  HYPSINE\000\
  HYPCOSINE\000\
  HYPTANGENT\000\
  SQUAREROOT\000\
  NATLOGARITHM\000\
  EXPONENTIAL\000\
  LOGARITHM\000\
  SWITCHED\000\
  DIMENSION\000\
  MODES\000\
  CONSTANTS\000\
  VARIABLES\000\
  TRAJECTORIES\000\
  COEFFICIENTS\000\
  VECTORFIELDS\000\
  SAMPLING\000\
  SAFETY\000\
  REACHABILITY\000\
  PLOT2D\000\
  PLOT2DOF3D\000\
  PLOT2DOF4D\000\
  SIMULATION\000\
  DISCRETE\000\
  CONTINUOUS\000\
  TIME\000\
  TAU\000\
  ETA\000\
  FINERSCALE\000\
  SCALEMINDWELL\000\
  WHEN\000\
  FOR\000\
  BELONGS\000\
  THEN\000\
  ELSE\000\
  SIMPLIFIED\000\
  EXPANDED\000\
  SETIMES\000\
  SETMINUS\000\
  "

let yynames_block = "\
  ID\000\
  ENUMFIELD\000\
  INTEGER\000\
  NATURAL\000\
  INTERVAL\000\
  REAL\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 14 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 12 : 'dimension) in
    let _5 = (Parsing.peek_val __caml_parser_env 11 : 'modes) in
    let _6 = (Parsing.peek_val __caml_parser_env 10 : 'constants) in
    let _7 = (Parsing.peek_val __caml_parser_env 9 : 'variables) in
    let _8 = (Parsing.peek_val __caml_parser_env 8 : 'trajectories) in
    let _9 = (Parsing.peek_val __caml_parser_env 7 : 'maybe_coefficients) in
    let _10 = (Parsing.peek_val __caml_parser_env 6 : 'vecfields) in
    let _11 = (Parsing.peek_val __caml_parser_env 5 : 'sampling) in
    let _12 = (Parsing.peek_val __caml_parser_env 4 : 'spaces) in
    let _13 = (Parsing.peek_val __caml_parser_env 3 : 'synthesis) in
    let _14 = (Parsing.peek_val __caml_parser_env 2 : 'plot) in
    Obj.repr(
# 71 "parser.mly"
                                                              ( Root (_2, _4, _5, _6, _7,  _8, _9, _10, _11, _12, _13, _14) )
# 738 "parser.ml"
               : Typecheck.ast))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 75 "parser.mly"
                                                              ( Dimension (Natural _3) )
# 745 "parser.ml"
               : 'dimension))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'mode_list) in
    Obj.repr(
# 79 "parser.mly"
                                                              ( Modes _4 )
# 752 "parser.ml"
               : 'modes))
; (fun __caml_parser_env ->
    Obj.repr(
# 83 "parser.mly"
                                                              ( [] )
# 758 "parser.ml"
               : 'mode_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'mode_list) in
    Obj.repr(
# 84 "parser.mly"
                                                              ( Enum_field _1 :: _2 )
# 766 "parser.ml"
               : 'mode_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'mode_list) in
    Obj.repr(
# 85 "parser.mly"
                                                              ( Enum_field _2 :: _3)
# 774 "parser.ml"
               : 'mode_list))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cts_list) in
    Obj.repr(
# 89 "parser.mly"
                                                              ( Constants _3 )
# 781 "parser.ml"
               : 'constants))
; (fun __caml_parser_env ->
    Obj.repr(
# 93 "parser.mly"
                                                              ( [] )
# 787 "parser.ml"
               : 'cts_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'id_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'xp) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'cts_list) in
    Obj.repr(
# 94 "parser.mly"
                                                              ( Constants_by_value (_1, _3) :: _5)
# 796 "parser.ml"
               : 'cts_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'id_list_tail) in
    Obj.repr(
# 100 "parser.mly"
                                                              ( Id _1 :: _2 )
# 804 "parser.ml"
               : 'id_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 104 "parser.mly"
                                                              ( [] )
# 810 "parser.ml"
               : 'id_list_tail))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'id_list_tail) in
    Obj.repr(
# 105 "parser.mly"
                                                              ( Id _2 :: _3 )
# 818 "parser.ml"
               : 'id_list_tail))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'vars_list) in
    Obj.repr(
# 109 "parser.mly"
                                                              ( Variables _3 )
# 825 "parser.ml"
               : 'variables))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'id_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'var_type) in
    Obj.repr(
# 114 "parser.mly"
                                                              ( Variables_by_type (_1, _3) )
# 833 "parser.ml"
               : 'vars_declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vars_declaration) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vars_list_tail) in
    Obj.repr(
# 118 "parser.mly"
                                                              ( _1 :: _2 )
# 841 "parser.ml"
               : 'vars_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 122 "parser.mly"
                                                              ( [] )
# 847 "parser.ml"
               : 'vars_list_tail))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'vars_declaration) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'vars_list_tail) in
    Obj.repr(
# 123 "parser.mly"
                                                              ( _2 :: _3 )
# 855 "parser.ml"
               : 'vars_list_tail))
; (fun __caml_parser_env ->
    Obj.repr(
# 127 "parser.mly"
                                                              ( VT_real )
# 861 "parser.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : float * float) in
    Obj.repr(
# 128 "parser.mly"
                                                              ( VT_interval _2 )
# 868 "parser.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 129 "parser.mly"
                                                              ( VT_realtoreal )
# 874 "parser.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 1 : float * float) in
    Obj.repr(
# 130 "parser.mly"
                                                              ( VT_realtointerval _4)
# 881 "parser.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'trajs_list) in
    Obj.repr(
# 134 "parser.mly"
                                                              ( Trajectories _3 )
# 888 "parser.ml"
               : 'trajectories))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'id_list) in
    Obj.repr(
# 139 "parser.mly"
                                                              ( Trajectory ( Id _1, _4) )
# 896 "parser.ml"
               : 'traj_delaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'traj_delaration) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'trajs_list_tail) in
    Obj.repr(
# 144 "parser.mly"
                                                              ( _1 :: _2 )
# 904 "parser.ml"
               : 'trajs_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 148 "parser.mly"
                                                              ( [] )
# 910 "parser.ml"
               : 'trajs_list_tail))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'traj_delaration) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'trajs_list_tail) in
    Obj.repr(
# 149 "parser.mly"
                                                              ( _2 :: _3 )
# 918 "parser.ml"
               : 'trajs_list_tail))
; (fun __caml_parser_env ->
    Obj.repr(
# 153 "parser.mly"
                                                              ( No_coefficients )
# 924 "parser.ml"
               : 'maybe_coefficients))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'coefs_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'coefs_values) in
    Obj.repr(
# 154 "parser.mly"
                                                              ( Coefficients (_3, _5) )
# 932 "parser.ml"
               : 'maybe_coefficients))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'id_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'coef_type) in
    Obj.repr(
# 158 "parser.mly"
                                                              ( Coefficients_by_type (_1,_3) )
# 940 "parser.ml"
               : 'coefs_declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'coefs_declaration) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'coefs_list_tail) in
    Obj.repr(
# 162 "parser.mly"
                                                              ( _1 :: _2 )
# 948 "parser.ml"
               : 'coefs_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 166 "parser.mly"
                                                              ( [] )
# 954 "parser.ml"
               : 'coefs_list_tail))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'coefs_declaration) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'coefs_list_tail) in
    Obj.repr(
# 167 "parser.mly"
                                                              ( _2 :: _3 )
# 962 "parser.ml"
               : 'coefs_list_tail))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 171 "parser.mly"
                                                              ( VT_matrix _3 )
# 969 "parser.ml"
               : 'coef_type))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 172 "parser.mly"
                                                              ( VT_vector _3 )
# 976 "parser.ml"
               : 'coef_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 173 "parser.mly"
                                                              ( VT_realtoreal )
# 982 "parser.ml"
               : 'coef_type))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 1 : float * float) in
    Obj.repr(
# 174 "parser.mly"
                                                              ( VT_realtointerval _4)
# 989 "parser.ml"
               : 'coef_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'coef_value) in
    Obj.repr(
# 178 "parser.mly"
                                                              ( Coefficient_value (Id _1, _3) )
# 997 "parser.ml"
               : 'coef_value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'coef_value) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'coefs_values_tail) in
    Obj.repr(
# 182 "parser.mly"
                                                              ( _1 :: _2 )
# 1005 "parser.ml"
               : 'coefs_values))
; (fun __caml_parser_env ->
    Obj.repr(
# 186 "parser.mly"
                                                              ( [] )
# 1011 "parser.ml"
               : 'coefs_values_tail))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'coef_value) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'coefs_values_tail) in
    Obj.repr(
# 187 "parser.mly"
                                                              ( _2 :: _3 )
# 1019 "parser.ml"
               : 'coefs_values_tail))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'xp) in
    Obj.repr(
# 191 "parser.mly"
                                                              ( Xp _1 )
# 1026 "parser.ml"
               : 'coef_value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'matrix) in
    Obj.repr(
# 192 "parser.mly"
                                                              ( _1 )
# 1033 "parser.ml"
               : 'coef_value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'vector) in
    Obj.repr(
# 193 "parser.mly"
                                                              ( _1 )
# 1040 "parser.ml"
               : 'coef_value))
; (fun __caml_parser_env ->
    Obj.repr(
# 206 "parser.mly"
                                                              ( Time )
# 1046 "parser.ml"
               : 'xp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 207 "parser.mly"
                                                              ( Id _1 )
# 1053 "parser.ml"
               : 'xp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 208 "parser.mly"
                                                              ( Natural _1 )
# 1060 "parser.ml"
               : 'xp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 209 "parser.mly"
                                                              ( Integer _1 )
# 1067 "parser.ml"
               : 'xp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 210 "parser.mly"
                                                              ( Real _1 )
# 1074 "parser.ml"
               : 'xp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'xp) in
    Obj.repr(
# 211 "parser.mly"
                                                              ( Parenthesed_xp _2 )
# 1081 "parser.ml"
               : 'xp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'xp) in
    Obj.repr(
# 212 "parser.mly"
                                                              ( Unary_op  (UOP_minus, _2) )
# 1088 "parser.ml"
               : 'xp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'xp) in
    Obj.repr(
# 213 "parser.mly"
                                                              ( Unary_op  (UOP_plus, _2) )
# 1095 "parser.ml"
               : 'xp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'xp) in
    Obj.repr(
# 214 "parser.mly"
                                                              ( Unary_op  (UOP_sine, _3) )
# 1102 "parser.ml"
               : 'xp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'xp) in
    Obj.repr(
# 215 "parser.mly"
                                                              ( Unary_op  (UOP_cosine, _3) )
# 1109 "parser.ml"
               : 'xp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'xp) in
    Obj.repr(
# 216 "parser.mly"
                                                              ( Unary_op  (UOP_tangent, _3) )
# 1116 "parser.ml"
               : 'xp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'xp) in
    Obj.repr(
# 217 "parser.mly"
                                                              ( Unary_op  (UOP_cotangent, _3) )
# 1123 "parser.ml"
               : 'xp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'xp) in
    Obj.repr(
# 218 "parser.mly"
                                                              ( Unary_op  (UOP_secant, _3) )
# 1130 "parser.ml"
               : 'xp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'xp) in
    Obj.repr(
# 219 "parser.mly"
                                                              ( Unary_op  (UOP_cosecant, _3) )
# 1137 "parser.ml"
               : 'xp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'xp) in
    Obj.repr(
# 220 "parser.mly"
                                                              ( Unary_op  (UOP_arcsine, _3) )
# 1144 "parser.ml"
               : 'xp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'xp) in
    Obj.repr(
# 221 "parser.mly"
                                                              ( Unary_op  (UOP_arccosine, _3) )
# 1151 "parser.ml"
               : 'xp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'xp) in
    Obj.repr(
# 222 "parser.mly"
                                                              ( Unary_op  (UOP_arctangent, _3) )
# 1158 "parser.ml"
               : 'xp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'xp) in
    Obj.repr(
# 223 "parser.mly"
                                                              ( Unary_op  (UOP_hypsine, _3) )
# 1165 "parser.ml"
               : 'xp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'xp) in
    Obj.repr(
# 224 "parser.mly"
                                                              ( Unary_op  (UOP_hypcosine, _3) )
# 1172 "parser.ml"
               : 'xp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'xp) in
    Obj.repr(
# 225 "parser.mly"
                                                              ( Unary_op  (UOP_hyptangent, _3) )
# 1179 "parser.ml"
               : 'xp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'xp) in
    Obj.repr(
# 226 "parser.mly"
                                                              ( Unary_op  (UOP_squareroot, _3) )
# 1186 "parser.ml"
               : 'xp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'xp) in
    Obj.repr(
# 227 "parser.mly"
                                                              ( Unary_op  (UOP_natlogarithm, _3) )
# 1193 "parser.ml"
               : 'xp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'xp) in
    Obj.repr(
# 228 "parser.mly"
                                                              ( Unary_op  (UOP_exponential, _3) )
# 1200 "parser.ml"
               : 'xp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'xp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'xp) in
    Obj.repr(
# 229 "parser.mly"
                                                              ( Binary_op (BOP_plus, _1, _3) )
# 1208 "parser.ml"
               : 'xp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'xp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'xp) in
    Obj.repr(
# 230 "parser.mly"
                                                              ( Binary_op (BOP_minus, _1, _3) )
# 1216 "parser.ml"
               : 'xp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'xp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'xp) in
    Obj.repr(
# 231 "parser.mly"
                                                              ( Binary_op (BOP_times, _1, _3) )
# 1224 "parser.ml"
               : 'xp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'xp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'xp) in
    Obj.repr(
# 232 "parser.mly"
                                                              ( Binary_op (BOP_divide, _1, _3) )
# 1232 "parser.ml"
               : 'xp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'xp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'xp) in
    Obj.repr(
# 233 "parser.mly"
                                                              ( Binary_op (BOP_modulus, _1, _3) )
# 1240 "parser.ml"
               : 'xp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'xp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'xp) in
    Obj.repr(
# 234 "parser.mly"
                                                              ( Binary_op (BOP_power, _1, _3) )
# 1248 "parser.ml"
               : 'xp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'xp) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'xp) in
    Obj.repr(
# 235 "parser.mly"
                                                              ( Binary_op (BOP_logarithm, _3, _5) )
# 1256 "parser.ml"
               : 'xp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'vector_elements) in
    Obj.repr(
# 239 "parser.mly"
                                                              ( Vector _2)
# 1263 "parser.ml"
               : 'vector))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'xp) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vector_elements_tail) in
    Obj.repr(
# 243 "parser.mly"
                                                              ( [Xp _1] @> _2 )
# 1271 "parser.ml"
               : 'vector_elements))
; (fun __caml_parser_env ->
    Obj.repr(
# 248 "parser.mly"
                                                              ( [] )
# 1277 "parser.ml"
               : 'vector_elements_tail))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'xp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'vector_elements_tail) in
    Obj.repr(
# 249 "parser.mly"
                                                              ( Xp _2 :: _3 )
# 1285 "parser.ml"
               : 'vector_elements_tail))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'matrix_elements) in
    Obj.repr(
# 253 "parser.mly"
                                                              ( Matrix _2)
# 1292 "parser.ml"
               : 'matrix))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vector) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'matrix_elements_tail) in
    Obj.repr(
# 257 "parser.mly"
                                                              ( [_1] @> _2 )
# 1300 "parser.ml"
               : 'matrix_elements))
; (fun __caml_parser_env ->
    Obj.repr(
# 261 "parser.mly"
                                                              ( [] )
# 1306 "parser.ml"
               : 'matrix_elements_tail))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'vector) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'matrix_elements_tail) in
    Obj.repr(
# 262 "parser.mly"
                                                              ( _2 :: _3 )
# 1314 "parser.ml"
               : 'matrix_elements_tail))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'vf_fors) in
    Obj.repr(
# 267 "parser.mly"
                                                              ( Vector_fields _3 )
# 1321 "parser.ml"
               : 'vecfields))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'vf_spec) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'vf_fors_tail) in
    Obj.repr(
# 271 "parser.mly"
                                                              ( Vector_field_for (Id _2, _4) :: _5 )
# 1330 "parser.ml"
               : 'vf_fors))
; (fun __caml_parser_env ->
    Obj.repr(
# 275 "parser.mly"
                                                              ( [] )
# 1336 "parser.ml"
               : 'vf_fors_tail))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'vf_spec) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'vf_fors_tail) in
    Obj.repr(
# 276 "parser.mly"
                                                              ( Vector_field_for (Id _3, _5) :: _6 )
# 1345 "parser.ml"
               : 'vf_fors_tail))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cases_by_spaces) in
    Obj.repr(
# 281 "parser.mly"
                                                              ( Cases_by_spaces _1 )
# 1352 "parser.ml"
               : 'vf_spec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'unique_case) in
    Obj.repr(
# 282 "parser.mly"
                                                              ( Unique_case _1 )
# 1359 "parser.ml"
               : 'vf_spec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'case_by_space) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cases_by_spaces_tail) in
    Obj.repr(
# 286 "parser.mly"
                                                              ( _2 :: _3 )
# 1367 "parser.ml"
               : 'cases_by_spaces))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'case_by_space) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'cases_by_spaces_tail) in
    Obj.repr(
# 290 "parser.mly"
                                                              ( _3 :: _4 )
# 1375 "parser.ml"
               : 'cases_by_spaces_tail))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'unique_case) in
    Obj.repr(
# 291 "parser.mly"
                                                              ( [Unique_case _2] )
# 1382 "parser.ml"
               : 'cases_by_spaces_tail))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'unique_case) in
    Obj.repr(
# 296 "parser.mly"
                                                              ( Case_by_space (Id _1, Unique_case _3) )
# 1390 "parser.ml"
               : 'case_by_space))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'simplified_or_expanded) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'unique_case_tail) in
    Obj.repr(
# 300 "parser.mly"
                                                              ( _1 :: _3 )
# 1398 "parser.ml"
               : 'unique_case))
; (fun __caml_parser_env ->
    Obj.repr(
# 305 "parser.mly"
                                                              ( [] )
# 1404 "parser.ml"
               : 'unique_case_tail))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'simplified_or_expanded) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'unique_case_tail) in
    Obj.repr(
# 306 "parser.mly"
                                                              ( _1 :: _3 )
# 1412 "parser.ml"
               : 'unique_case_tail))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'xp) in
    Obj.repr(
# 310 "parser.mly"
                                                              ( Simplified_vecfield (Enum_field _3, Id _5, _7) )
# 1421 "parser.ml"
               : 'simplified_or_expanded))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expanded) in
    Obj.repr(
# 311 "parser.mly"
                                                              ( Expanded_vecfields (Enum_field _3, _5) )
# 1429 "parser.ml"
               : 'simplified_or_expanded))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'xp) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expanded_tail) in
    Obj.repr(
# 316 "parser.mly"
                                                              ( Expanded_vecfield (Id _1, _3) :: _4)
# 1438 "parser.ml"
               : 'expanded))
; (fun __caml_parser_env ->
    Obj.repr(
# 320 "parser.mly"
                                                              ( [] )
# 1444 "parser.ml"
               : 'expanded_tail))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'xp) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expanded_tail) in
    Obj.repr(
# 321 "parser.mly"
                                                              ( Expanded_vecfield (Id _2, _4) :: _5)
# 1453 "parser.ml"
               : 'expanded_tail))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'sparams_list) in
    Obj.repr(
# 326 "parser.mly"
                                                              ( Sampling_params _3 )
# 1460 "parser.ml"
               : 'sampling))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : 'time_sam) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'space_sam) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'finer) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'scale_minimal_dwell) in
    Obj.repr(
# 331 "parser.mly"
                                                              ( [_1 ; _3 ; _5; _7] )
# 1470 "parser.ml"
               : 'sparams_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'time_sam) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'space_sam) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'finer) in
    Obj.repr(
# 332 "parser.mly"
                                                              ( [_1 ; _3 ; _5] )
# 1479 "parser.ml"
               : 'sparams_list))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'xp) in
    Obj.repr(
# 336 "parser.mly"
                                                              ( Time_sampling _3 )
# 1486 "parser.ml"
               : 'time_sam))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'xp) in
    Obj.repr(
# 340 "parser.mly"
                                                              ( Space_sampling _3 )
# 1493 "parser.ml"
               : 'space_sam))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 344 "parser.mly"
                                                              ( Finer (Natural _3) )
# 1500 "parser.ml"
               : 'finer))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 348 "parser.mly"
                                                              ( Scale_minimal_dwell (Natural _3))
# 1507 "parser.ml"
               : 'scale_minimal_dwell))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'state_space) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'spaces_tail) in
    Obj.repr(
# 352 "parser.mly"
                                                              ( Space (Id _1,_3) :: _5)
# 1516 "parser.ml"
               : 'spaces))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'state_space) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'state_space) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'spaces_tail) in
    Obj.repr(
# 354 "parser.mly"
                                                              ( SpaceMinusSpace (Id _1,_3,_5) :: _7)
# 1526 "parser.ml"
               : 'spaces))
; (fun __caml_parser_env ->
    Obj.repr(
# 358 "parser.mly"
                                                              ( [] )
# 1532 "parser.ml"
               : 'spaces_tail))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'state_space) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'spaces_tail) in
    Obj.repr(
# 359 "parser.mly"
                                                              ( Space (Id _1,_3) :: _5)
# 1541 "parser.ml"
               : 'spaces_tail))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'state_space) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'state_space) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'spaces_tail) in
    Obj.repr(
# 361 "parser.mly"
                                                              ( SpaceMinusSpace (Id _1,_3,_5) :: _7)
# 1551 "parser.ml"
               : 'spaces_tail))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : float * float) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'st_space_tail) in
    Obj.repr(
# 365 "parser.mly"
                                                              ( (Spacei (VT_interval _2)) :: _4 )
# 1559 "parser.ml"
               : 'state_space))
; (fun __caml_parser_env ->
    Obj.repr(
# 369 "parser.mly"
                                                              ( [] )
# 1565 "parser.ml"
               : 'st_space_tail))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : float * float) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'st_space_tail) in
    Obj.repr(
# 370 "parser.mly"
                                                              ( (Spacei (VT_interval _3)) :: _5 )
# 1573 "parser.ml"
               : 'st_space_tail))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'safety) in
    Obj.repr(
# 375 "parser.mly"
                                                              ( _1 )
# 1580 "parser.ml"
               : 'synthesis))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'reachability) in
    Obj.repr(
# 376 "parser.mly"
                                                              ( _1 )
# 1587 "parser.ml"
               : 'synthesis))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'safety_elems) in
    Obj.repr(
# 381 "parser.mly"
                                                              ( _3 )
# 1594 "parser.ml"
               : 'safety))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 385 "parser.mly"
                                                              ( Safety (Id _1, Id _3, Id _5, Real 0.0, Natural _7) )
# 1604 "parser.ml"
               : 'safety_elems))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : float) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 386 "parser.mly"
                                                              ( Safety (Id _1, Id _3, Id _5, Real _7, Natural _9) )
# 1615 "parser.ml"
               : 'safety_elems))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'reach_elems) in
    Obj.repr(
# 391 "parser.mly"
                                                              ( _3 )
# 1622 "parser.ml"
               : 'reachability))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 10 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _9 = (Parsing.peek_val __caml_parser_env 2 : float) in
    let _11 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 395 "parser.mly"
                                                              ( Reachability (Id _1, Id _3, Id _5, Id _7, Real _9, Natural _11) )
# 1634 "parser.ml"
               : 'reach_elems))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'plot2d) in
    Obj.repr(
# 400 "parser.mly"
                                                              ( _3 )
# 1641 "parser.ml"
               : 'plot))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'plot2d3d) in
    Obj.repr(
# 401 "parser.mly"
                                                              ( _3 )
# 1648 "parser.ml"
               : 'plot))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'plot2d4d) in
    Obj.repr(
# 402 "parser.mly"
                                                              ( _3 )
# 1655 "parser.ml"
               : 'plot))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'plotarrows) in
    Obj.repr(
# 403 "parser.mly"
                                                              ( _3 )
# 1662 "parser.ml"
               : 'plot))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'plot_trajs) in
    Obj.repr(
# 404 "parser.mly"
                                                              ( _3 )
# 1669 "parser.ml"
               : 'plot))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : float) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : float) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 409 "parser.mly"
                                                              ( Plot_arrows (Real _1, Real _3, Some (Enum_field _5)) )
# 1678 "parser.ml"
               : 'plotarrows))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : float) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 410 "parser.mly"
                                                              ( Plot_arrows (Real _1, Real _3, None) )
# 1686 "parser.ml"
               : 'plotarrows))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 11 : 'real_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 8 : float) in
    let _7 = (Parsing.peek_val __caml_parser_env 6 : float) in
    let _9 = (Parsing.peek_val __caml_parser_env 4 : int) in
    let _11 = (Parsing.peek_val __caml_parser_env 2 : float) in
    let _13 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 415 "parser.mly"
                                                              ( Plot_trajectory (_2, Real _5, Real _7, Natural _9, Real _11, Real _13, None, None) )
# 1698 "parser.ml"
               : 'plot_trajs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 13 : 'real_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 10 : float) in
    let _7 = (Parsing.peek_val __caml_parser_env 8 : float) in
    let _9 = (Parsing.peek_val __caml_parser_env 6 : int) in
    let _11 = (Parsing.peek_val __caml_parser_env 4 : float) in
    let _13 = (Parsing.peek_val __caml_parser_env 2 : float) in
    let _15 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 417 "parser.mly"
                                                              ( Plot_trajectory (_2, Real _5, Real _7, Natural _9, Real _11, Real _13, Some (Enum_field _15), None) )
# 1711 "parser.ml"
               : 'plot_trajs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 13 : 'real_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 10 : float) in
    let _7 = (Parsing.peek_val __caml_parser_env 8 : float) in
    let _9 = (Parsing.peek_val __caml_parser_env 6 : int) in
    let _11 = (Parsing.peek_val __caml_parser_env 4 : float) in
    let _13 = (Parsing.peek_val __caml_parser_env 2 : float) in
    Obj.repr(
# 419 "parser.mly"
                                                              ( Plot_trajectory (_2, Real _5, Real _7, Natural _9, Real _11, Real _13, None, Some true) )
# 1723 "parser.ml"
               : 'plot_trajs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 15 : 'real_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 12 : float) in
    let _7 = (Parsing.peek_val __caml_parser_env 10 : float) in
    let _9 = (Parsing.peek_val __caml_parser_env 8 : int) in
    let _11 = (Parsing.peek_val __caml_parser_env 6 : float) in
    let _13 = (Parsing.peek_val __caml_parser_env 4 : float) in
    let _15 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 421 "parser.mly"
                                                              ( Plot_trajectory (_2, Real _5, Real _7, Natural _9, Real _11, Real _13, Some (Enum_field _15), Some true) )
# 1736 "parser.ml"
               : 'plot_trajs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 13 : 'real_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 10 : float) in
    let _7 = (Parsing.peek_val __caml_parser_env 8 : float) in
    let _9 = (Parsing.peek_val __caml_parser_env 6 : int) in
    let _11 = (Parsing.peek_val __caml_parser_env 4 : float) in
    let _13 = (Parsing.peek_val __caml_parser_env 2 : float) in
    Obj.repr(
# 423 "parser.mly"
                                                              ( Plot_trajectory (_2, Real _5, Real _7, Natural _9, Real _11, Real _13, None, Some false) )
# 1748 "parser.ml"
               : 'plot_trajs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 15 : 'real_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 12 : float) in
    let _7 = (Parsing.peek_val __caml_parser_env 10 : float) in
    let _9 = (Parsing.peek_val __caml_parser_env 8 : int) in
    let _11 = (Parsing.peek_val __caml_parser_env 6 : float) in
    let _13 = (Parsing.peek_val __caml_parser_env 4 : float) in
    let _15 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 425 "parser.mly"
                                                              ( Plot_trajectory (_2, Real _5, Real _7, Natural _9, Real _11, Real _13, Some (Enum_field _15), Some false) )
# 1761 "parser.ml"
               : 'plot_trajs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 18 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 16 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 13 : 'string_list) in
    let _10 = (Parsing.peek_val __caml_parser_env 9 : 'string_list) in
    let _13 = (Parsing.peek_val __caml_parser_env 6 : float) in
    let _15 = (Parsing.peek_val __caml_parser_env 4 : float) in
    let _18 = (Parsing.peek_val __caml_parser_env 1 : 'labels_to_print) in
    Obj.repr(
# 433 "parser.mly"
                                                              ( Plot_2d (_1, _3, _6, _10, Real _13, Real _15, _18, None) )
# 1774 "parser.ml"
               : 'plot2d))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 20 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 18 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 15 : 'string_list) in
    let _10 = (Parsing.peek_val __caml_parser_env 11 : 'string_list) in
    let _13 = (Parsing.peek_val __caml_parser_env 8 : float) in
    let _15 = (Parsing.peek_val __caml_parser_env 6 : float) in
    let _18 = (Parsing.peek_val __caml_parser_env 3 : 'labels_to_print) in
    let _21 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 436 "parser.mly"
                                                              ( Plot_2d (_1, _3, _6, _10, Real _13, Real _15, _18, 
                                                                         Some (Enum_field _21)) )
# 1789 "parser.ml"
               : 'plot2d))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 24 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 22 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 19 : 'string_list) in
    let _10 = (Parsing.peek_val __caml_parser_env 15 : 'string_list) in
    let _13 = (Parsing.peek_val __caml_parser_env 12 : float) in
    let _15 = (Parsing.peek_val __caml_parser_env 10 : float) in
    let _18 = (Parsing.peek_val __caml_parser_env 7 : 'labels_to_print) in
    let _21 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _23 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _25 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 444 "parser.mly"
                                                              ( Plot_2d3d (_1, _3, _6, _10, Real _13, Real _15, _18, Id _21, Id _23, Real _25, None) )
# 1805 "parser.ml"
               : 'plot2d3d))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 26 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 24 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 21 : 'string_list) in
    let _10 = (Parsing.peek_val __caml_parser_env 17 : 'string_list) in
    let _13 = (Parsing.peek_val __caml_parser_env 14 : float) in
    let _15 = (Parsing.peek_val __caml_parser_env 12 : float) in
    let _18 = (Parsing.peek_val __caml_parser_env 9 : 'labels_to_print) in
    let _21 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _23 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _25 = (Parsing.peek_val __caml_parser_env 2 : float) in
    let _27 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 447 "parser.mly"
                                                              ( Plot_2d3d (_1, _3, _6, _10, Real _13, Real _15, _18, Id _21, Id _23, Real _25, 
                                                                           Some (Enum_field _27)) )
# 1823 "parser.ml"
               : 'plot2d3d))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 26 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 24 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 21 : 'string_list) in
    let _10 = (Parsing.peek_val __caml_parser_env 17 : 'string_list) in
    let _13 = (Parsing.peek_val __caml_parser_env 14 : float) in
    let _15 = (Parsing.peek_val __caml_parser_env 12 : float) in
    let _18 = (Parsing.peek_val __caml_parser_env 9 : 'labels_to_print) in
    let _21 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _23 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _25 = (Parsing.peek_val __caml_parser_env 2 : float) in
    let _27 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 454 "parser.mly"
                                                              ( Plot_2d4d (_1, _3, _6, _10, Real _13, Real _15, _18, Id _21, Id _23, Real _25, Real _27, None) )
# 1840 "parser.ml"
               : 'plot2d4d))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 28 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 26 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 23 : 'string_list) in
    let _10 = (Parsing.peek_val __caml_parser_env 19 : 'string_list) in
    let _13 = (Parsing.peek_val __caml_parser_env 16 : float) in
    let _15 = (Parsing.peek_val __caml_parser_env 14 : float) in
    let _18 = (Parsing.peek_val __caml_parser_env 11 : 'labels_to_print) in
    let _21 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _23 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _25 = (Parsing.peek_val __caml_parser_env 4 : float) in
    let _27 = (Parsing.peek_val __caml_parser_env 2 : float) in
    let _29 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 457 "parser.mly"
                                                              ( Plot_2d4d (_1, _3, _6, _10, Real _13, Real _15, _18, Id _21, Id _23, Real _25, Real _27, 
                                                                           Some (Enum_field _29)) )
# 1859 "parser.ml"
               : 'plot2d4d))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : float) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'real_list_tail) in
    Obj.repr(
# 462 "parser.mly"
                                                              ( Real _1 :: _2 )
# 1867 "parser.ml"
               : 'real_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 466 "parser.mly"
                                                              ( [] )
# 1873 "parser.ml"
               : 'real_list_tail))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : float) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'real_list_tail) in
    Obj.repr(
# 467 "parser.mly"
                                                              ( Real _2 :: _3 )
# 1881 "parser.ml"
               : 'real_list_tail))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'string_list_tail) in
    Obj.repr(
# 471 "parser.mly"
                                                              ( _1 :: _2 )
# 1889 "parser.ml"
               : 'string_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 475 "parser.mly"
                                                              ( [] )
# 1895 "parser.ml"
               : 'string_list_tail))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'string_list_tail) in
    Obj.repr(
# 476 "parser.mly"
                                                              ( _2 :: _3 )
# 1903 "parser.ml"
               : 'string_list_tail))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'labels_to_print_tail) in
    Obj.repr(
# 481 "parser.mly"
                                                              ( Label (Enum_field _2, Natural _4) :: _6 )
# 1912 "parser.ml"
               : 'labels_to_print))
; (fun __caml_parser_env ->
    Obj.repr(
# 486 "parser.mly"
                                                              ( [] )
# 1918 "parser.ml"
               : 'labels_to_print_tail))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'labels_to_print_tail) in
    Obj.repr(
# 488 "parser.mly"
                                                              ( Label (Enum_field _3, Natural _5) :: _7 )
# 1927 "parser.ml"
               : 'labels_to_print_tail))
(* Entry specification *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let specification (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Typecheck.ast)
